@router.get("/delete-item")
def items_to_delete(
        request:Request,
        db:Session=Depends(get_db)
):
    errors = []
    token = request.cookies.get("access_token")
    if token is None:
        errors.append("please login as admin")
        return templates.TemplateResponse(
            "item_to_delete.html",
            {
                "request": request,
                "errors": errors
            }
        )

    else:
        try:
            scheme, _, param = token.partition(" ")
            payload = jwt.decode(
                param, setting.SECRET_KEY, algorithms=setting.ALGORITHM
            )
            email = payload.get("sub")
            admin = db.query(Admin).filter(Admin.email == email).first()
            items = db.query(Item).all()
            return templates.TemplateResponse(
                "item_to_delete.html", {"request": request, "items": items}
            )
        except Exception as e:
            print(e)
            errors.append("You are not Authenticated")
            return templates.TemplateResponse(
                "item_to_delete.html",
                {"request": request, "errors": errors},
            )



form = await request.form()
#id = Optional[form.get("id")]
title = form.get("title")
item_type = form.get("item_type")
category = form.get("category")
quantity = form.get("quantity")
creation_date = form.get("creation_date")

#if admin is not none
#admin exists and is logged in
item = Item(
    title=title,
    item_type=item_type,
    category=category,
    quantity=quantity,
    creation_date=datetime.date.today(),

)
db.add(item)
db.commit()
db.refresh(item)